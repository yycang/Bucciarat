#################
# http and https
#################

"""

HTTP: 超文本传输协议
HTTPS: HTTP+SSL(安全套接字层)

多了一步加密过程,使得HTTPS比HTTP安全性更高,但是性能比HTTP要低那么个20%左右

"""

##########
# url的格式
##########

url = 'http://detail.tmall.com/item.htm?id=543323324#detail'

"""

url格式分为:
1.http://             协议(例如:http,https,ftp等)
2.detail.tmall.com    host(ip地址或者域名)
3.80                  port(端口号,http默认为80,https默认为443)
4.item.htm            path(服务器上面访问资源的路径)
5.?id=543323324       参数(发给服务器的请求数据,多个参数使用&隔开)
6.#detail             锚点(定位到网页指定的锚点位置,感觉这个词语就像船抛锚一样十分形象生动)

"""

#################
# 浏览器发送HTTP请求
#################

"""

1.首先在浏览器上输入域名,浏览器拿着域名访问DNS服务器
2.DNS服务器把域名解析成对应的ip地址返回回来
3.然后浏览器拿着ip地址向那个地址的服务器发送请求

"""

############
# HTTP请求报文
############

"""

1.请求行: 请求方法(GET,POST); URL(/xxx/xxx); 协议版本
2.请求头
3.请求数据(在请求POST方法中传入请求数据)

常见请求头:

1.HOST
2.Connection (链接类型)
3.Upgrade-Insecure-Requests (升级为HTTPS请求)
4.User-Agent (用户代理, 也就是常说的用户头, 告诉服务器请求的是哪一款浏览器)
5.Accept (接受的传输文件类型, 分号(;)隔开, q是权重值, 如果没有q默认q=1, 通过权重值划分优先获取的文件类型)
6.Referer (指名了上一步通过哪个网页访问的此页面, 可以用来做防盗链或者反爬)
7.Accept-Encoding (文件编码格式)
8.Cookie (记录用户状态, 可以通过浏览器携带cookie请求发送给服务器得知用户已经进行登录等信息)
9.x-requested-with:XMLHttpRequest (是Ajax异步请求)

"""

##########
# get&post
##########

"""

简单提及一下
区别:
get: 用来请求资源; 在url中传入实体数据; 传输的数据量小
post: 传输实体数据; 在实体中传输数据; 传输的数据量大

"""

##########
# 响应状态码
##########

"""

200: OK
302: 重定向
403: Forbidden 禁止访问
404: Not Found
500: 服务器内部错误

"""